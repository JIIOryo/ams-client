import os
import subprocess
import sys

import pathlib
current_dir = pathlib.Path(__file__).resolve().parent
sys.path.append( str(current_dir) + '/../' )

from commons.consts import (
    CRON_START_TEXT,
    CRON_END_TEXT,
    CRON_COMMENT_FORMAT,
    CRON_FORMAT_DAILY,
    CRON_FORMAT_DISCREATE,
    DEVICE_RUN_TYPE,
    DEVICE_TYPE,
    FEED_PUMP_DEFAULT_TIME,
)

from lib.config import get_gpio_config
from lib.cron import get_crontab, write_to_crontab


def cron_text_generator() -> str:
    """
    This text is generated by this function.
    
    # ------ AMS start -------
    # device_id: 1
    # device_name: my_main_light
    # on
    30 10 * * * gpio -g mode 26 out && gpio -g write 26 1
    # off
    30 18 * * * gpio -g mode 26 out && gpio -g write 26 0

    # device_id: 2
    # device_name: my_sub_light
    # on
    30 10 * * * gpio -g mode 19 out && gpio -g write 19 1
    # off
    30 18 * * * gpio -g mode 19 out && gpio -g write 19 0

    ...

    # device_id: 5
    # device_name: feed_pump
    # on
    30 10 * * * python3 feed_pump.py [args]
    0 15 * * * python3 feed_pump.py [args]
    30 22 * * * python3 feed_pump.py [args]
    # ------ AMS end -------

    """
    gpio_config = get_gpio_config()

    # initial value
    cron_text = CRON_START_TEXT + '\n'

    for device in gpio_config:

        # if device does not exist
        if device['device'] == {}:
            continue
        
        # if the device runs continuously like a wave pump
        if device['device']['run_type'] == DEVICE_RUN_TYPE['CONTINUOUS']:
            continue

        timer = device['device']['options']['timer']

        # if run type is "daily"
        if device['device']['run_type'] == DEVICE_RUN_TYPE['DAILY']:
            """
            "timer":{
                "on_hour":17,
                "on_minute":30,
                "off_hour":10,
                "off_minute":0
            }
            """
            # add comment
            cron_text += CRON_COMMENT_FORMAT.format(
                device_id = device['device_id'],
                device_name = device['device']['name'].replace('\n', ' '),
            )
            # add cron entry
            cron_text += CRON_FORMAT_DAILY.format(
                BCM = device['BCM'],
                on_minute = timer['on_minute'],
                on_hour = timer['on_hour'],
                off_minute = timer['off_minute'],
                off_hour = timer['off_hour'],
            )
        
        # if run type is "discreate"
        elif device['device']['run_type'] == DEVICE_RUN_TYPE['DISCREATE']:
            """
            "timer": [
                {"hour": 10, "minute": 30},
                {"hour": 15, "minute": 0},
                {"hour": 22, "minute": 30}
            ]
            """
            # There is not any timer entry.
            if len(timer) == 0:
                continue
            
            # add comment
            cron_text += CRON_COMMENT_FORMAT.format(
                device_id = device['device_id'],
                device_name = device['device']['name'].replace('\n', ' '),
            )
            # add cron entries
            for one_timer in timer:
                cron_text += CRON_FORMAT_DISCREATE.format(
                    minute = one_timer['minute'],
                    hour = one_timer['hour'],
                    cmd = cron_cmd_generator_by_type(
                        device['device']['type'],
                        device_id = device['device_id'],
                    ),
                )
            cron_text += '\n\n'
    
    cron_text += CRON_END_TEXT

    return cron_text


def set_new_timer() -> None:
    crontab = get_crontab() # list
    new_timer_setting_str = cron_text_generator() # str

    # if timer does not exist yet
    if CRON_START_TEXT not in crontab or CRON_END_TEXT not in crontab:
        new_crontab = '\n'.join(crontab) + new_timer_setting_str

    # if timer exist
    else:
        # rewrite current crontab
        crontab[ crontab.index(CRON_START_TEXT) : crontab.index(CRON_END_TEXT) + 1 ] = new_timer_setting_str.split('\n')
        new_crontab = '\n'.join(crontab)

    write_to_crontab(new_crontab)


def cron_cmd_generator_by_type(type_: str, device_id: int) -> None:

    PWD = os.getcwd()

    if type_ == DEVICE_TYPE['FEED_PUMP']:
        entry_point = '/'.join([PWD, 'entry_points', 'feed_pump.py'])
        return 'python3 {entry_point} {device_id} {water_feed_time}'.format(
            entry_point = entry_point,
            device_id = device_id,
            water_feed_time = FEED_PUMP_DEFAULT_TIME,
        )
    
    elif type_ == DEVICE_TYPE['AUTO_FEEDER']:
        entry_point = '/'.join([PWD, 'entry_points', 'auto_feeder.py'])
        return 'python3 {entry_point} {device_id}'.format(
            entry_point = entry_point,
            device_id = device_id,
        )

    else:
        return 'echo todo'
